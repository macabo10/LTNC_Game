//
//  C_function.cpp
//  LTNC_game
//
//  Created by Phan Vi·ªát H∆∞ng on 01/04/2022.
//

#include "C_function.hpp"
#include <stdio.h>
#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <cstdlib>
#include <ctime>
#include <SDL2/SDL.h>
#include <SDL_image.h>
#include <sstream>
#include <iomanip>
#include <SDL_ttf.h>
#include "SDL_function.hpp"

vector<SDL_Texture*> player::loadPlayerHandTexture(vector<vector<SDL_Texture* > > fullDeck, SDL_Renderer* renderer) {
    vector<SDL_Texture*> handTexture;
    for (int i = 0; i < hand.size(); i++) {
        if (hand[i].up == true) {
            if (hand[i].suit == H) {
                handTexture.push_back(fullDeck[0][hand[i].value-1]);
            } else if (hand[i].suit == D) {
                handTexture.push_back(fullDeck[1][hand[i].value-1]);
            } else if (hand[i].suit == C) {
                handTexture.push_back(fullDeck[2][hand[i].value-1]);
            } else if (hand[i].suit == S) {
                handTexture.push_back(fullDeck[3][hand[i].value-1]);
            }
        } else {
            handTexture.push_back(loadTexture("/Users/phanviethung/Documents/Learn/UET/LTNC/Game/LTNC_game/LTNC_game/images/card_deck/backcard.png", renderer));
        }
        
    }
    return handTexture;
}

//h√†m b·ªëc th√™m b√†i
card hitMe(vector<card> &usedCards){
    return deal(usedCards);
}

//h√†m chia 1 l√° b√†i
card deal(vector<card> &usedCards){
    card new_card;
    
    do {
        new_card.value = 1 + rand() % 13; //random s·ªë
        //random ch·∫•t
        int suit = rand() % 4;
        switch(suit){
            case 0:
                new_card.suit = S;
                break;
            case 1:
                new_card.suit = H;
                break;
            case 2:
                new_card.suit = D;
                break;
            case 3:
                new_card.suit = C;
                break;
        }

        new_card.up = true;

    } while (checkDuplicatedCard(usedCards, new_card));
    
    return new_card;
}

bool checkDuplicatedCard (vector<card> usedCards, card newCard){
    for (int i = 0; i < usedCards.size(); i++) {
        if (newCard.value == usedCards[i].value && newCard.suit == usedCards[i].suit) {
            return true;
        }
    }
    return false;
}

//t·∫°o account cho ng∆∞·ªùi ch∆°i m·ªõi
account create(){
    account user; //kh·ªüi t·∫°o 1 account m·ªõi
    cout << "What is the username you'd like to use?" << endl;
    
    //khai b√°o th√¥ng tin file d·ªØ li·ªáu ng∆∞·ªùi ch∆°i
    fstream input; //input
    string filename; //t√™n file

    do{
        cin >> user.username; //nh·∫≠p usermame
        filename = user.username + ".dat"; //th√™m ƒëu√¥i cho t√™n file
        input.open(filename); //th·ª≠ m·ªü file c√≥ t√™n username ng∆∞·ªùi ch∆°i ƒë√£ nh·∫≠p
        //ki·ªÉm tra xem username c√≥ b·ªã tr√πng kh√¥ng
        if(!input.fail()){
            cout << "This username is already taken. Please choose another one." << endl;
        }
    }while(!input.fail()); //ch·∫°y v√≤ng l·∫∑p ƒë·∫øn khi ng∆∞·ªùi ch∆°i ch·ªçn ƒë∆∞·ª£c t√™n username kh√¥ng b·ªã tr√πng

    cout << "Please enter a password." << endl; //nh·∫≠p password
    cin.ignore();//xo√° b·ªô nh·ªõ ƒë·ªám
    getline(cin, user.password); //cho ng∆∞·ªùi ch∆°i nh·∫≠p password (s∆∞ d·ª•ng getline v√¨ password ƒë∆∞·ª£c ph√©p c√≥ d·∫•y c√°ch)
    cin.ignore(); //xo√° b·ªô nh·ªõ ƒë·ªám

    cout << "Please enter your name." << endl; //h·ªèi t√™n ng∆∞·ªùi ch∆°i
    getline(cin, user.name); //nh·∫≠p t√™n ng∆∞·ªùi ch∆°i (s·ª≠ d·ª•ng getline v√¨ t√™n c√≥ th·ªÉ c√≥ d·∫•u c√°ch)

    cout << "Please enter your email address." << endl; //h·ªèi email address
    cin >> user.email; //cho ng∆∞·ªùi ch∆°i nh·∫≠p t√™n

    cout << "Please enter how much money you'd like to deposit" << endl; //h·ªèi l∆∞·ª£ng ti·ªÅn ng∆∞·ªùi ch∆°i mu·ªën buy in
    cin >> user.money; //cho ng∆∞·ªùi ch∆°i nh·∫≠p s·ªë ti·ªÅn mu·ªën buy in

    //set t·∫•t c·∫£ c√°c th√¥ng s·ªë ng∆∞·ªùi ch∆°i v·ªÅ 0
    user.total_played = 0;
    user.wins = 0;
    user.win_percentage = 0;

    input.close(); //ƒë√≥ng file
    return user; //tr·∫£ v·ªÅ th√¥ng tin 1 ng∆∞·ªùi ch∆°i thu·ªôc struct account
}

//l∆∞u th√¥ng tin account
void save(player user){
    ofstream output; //output stream
    string filename = user.info.username + ".dat";

    output.open(filename, ios::out); //xo√° file c≈©

    if(!output){//if we can't open output
        cerr << "Output file will not open and data could not be saved. " << endl;
    }

    double percent = 0;
    if(user.info.total_played == 0){
        percent = 0;
    }
    else{
        percent = ((double)user.info.wins/user.info.total_played)*100;
    }
    output << user.info.username << endl << user.info.password << endl << user.info.name << endl << user.info.email << endl << user.info.money << endl << user.info.total_played << endl << user.info.wins << endl << setprecision (3) << percent; //l∆∞u th√¥ng tin
    output.close();
}

//load th√¥ng tin ng∆∞·ªùi ch∆°i c≈©
account load(){
    string username, password;
    string filename;
    account user;
    ifstream input;

    //cho ng∆∞·ªùi ch∆°i ƒëƒÉng nh·∫≠p
    cout << "What is your username" << endl;
    cin >> username;
    filename = username + ".dat";
    input.open(filename);

    while (input.fail()) {
        cout << "Your username is incorrect, please re-enter it. " << endl;
        cin >> username;
        filename = username + ".dat";
        input.open(filename);
    }
    

    getline(input, user.username); //l·∫•y username t·ª´ file data
    getline(input, user.password); //l·∫•y password t·ª´ file data

    
    cout << "What is your password? " << endl;
    cin >> password;
    
    while (!(password == user.password)) {
        cout << "Wrong password! Please re-enter password. " << endl;
        cin >> password;
    }
    
 
    getline(input, user.name);
    getline(input, user.email);
    input >> user.money;
    input >> user.total_played;
    input >> user.wins;
    input >> user.win_percentage;
    
    input.close(); //ƒë√≥ng file
    return user; //tr·∫£ v·ªÅ user
}

//b·ªè h·∫øt b√†i tr√™n tay
void clear(vector<card> &hand){
    hand.clear();
}

void renderPlayersCards(vector<player>& players, SDL_Renderer *renderer, vector<vector<SDL_Texture* > > fullDeck, int SCREEN_WIDTH) {
    players[0].handTexture = players[0].loadPlayerHandTexture(fullDeck, renderer);
    players[1].handTexture = players[1].loadPlayerHandTexture(fullDeck, renderer);
    renderPlayerCards(players[0].handTexture, (SCREEN_WIDTH/2) - 100*players[0].hand.size()/2 - 20*(players[0].hand.size()-1)/2, 265, renderer);
    renderPlayerCards(players[1].handTexture, (SCREEN_WIDTH/2) - 100*players[1].hand.size()/2 - 20*(players[1].hand.size()-1)/2, 750, renderer);
}

void renderCurrentTexture(vector<texture_info> current_textures_info, SDL_Renderer *renderer) {
    for (int i = 0; i < current_textures_info.size(); i++) {
        renderTexture(current_textures_info[i].tex, renderer, current_textures_info[i].x, current_textures_info[i].y);
    }
}
