/**
    Game of Blackjack
    You can play with one or two players
    each player creaates a account if they don't have one and if they do they can load their existing data
    Each player and the dealer are dealt two cards, the dealers first card is face down
*/
#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <cstdlib>
#include <ctime>
#include <SDL2/SDL.h>
#include <SDL_image.h>
#include "SDL_function.hpp"
#include <sstream>
#include <iomanip>


using namespace std;

//khai b√°o
SDL_Window* window = nullptr;
SDL_Renderer* renderer = nullptr;
const string WINDOW_TITLE = "Blackjack";
const int SCREEN_WIDTH = 1600;
const int SCREEN_HEIGHT = 1000;
SDL_Texture *background = nullptr, *menu = nullptr, *rule = nullptr, *chipset = nullptr;
void unload_SDL_and_Images();
vector<vector<SDL_Texture* > > fullDeck;
//Ch·∫•t b√†i (b√≠ch c∆° r√¥ t√©p)
enum card_suit{
    S, H, D, C
};

//M·ª©c bet t·ªëi thi·ªÉu (khai b√°o global ƒë·ªÉ m·ªói l·∫ßn s·ª≠ d·ª•ng ·ªü trong 1 function kh√¥ng ph·∫£i kh·ªüi t·∫°o l·∫°i)
int MIN_BET = 5; //Gi√° tr·ªã bet t·ªëi thi·ªÉu l√† 5

//Structures
//struct acount l∆∞u tr·ªØ d·ª± li·ªáu v·ªÅ ng∆∞·ªùi ch∆°i
struct account{ //account structure. This will store all the player information
    string name; //t√™n ng∆∞·ªùi ch∆°i
    string email; //email
    string username; //username c·ªßa ng∆∞·ªùi ch∆°i
    string password; //password c·ªßa ng∆∞·ªùi ch∆°i

    //ti·ªÅn c·ªßa ng∆∞·ªùi ch∆°i
    //tr∆∞·ªùng h·ª£p ng∆∞·ªùi ch∆°i ch∆°i tr·ªü l·∫°i ti·ªÅn v·∫´n s·∫Ω ƒë∆∞·ª£c l∆∞u tr·ªØ
    int money;

    //c√°c th√¥ng s·ªë ng∆∞·ªùi ch∆°i
    int wins; //s·ªë v√°n th·∫Øng
    int total_played; //s·ªë v√°n ƒë√£ ch∆°i
    double win_percentage; //t·ªâ l·ªá th·∫Øng
};

//th√¥ng tin l√° b√†i
struct card{
    int value; //gi√° tr·ªã s·ªë c·ªßa l√° b√†i
    card_suit suit; //ch·∫•t c·ªßa l√° b√†i
    bool up; //ki·ªÉm tra l√° b√†i √∫p hay ng·ª≠a (s·ª≠ d·ª•ng cho dealer v√¨ 1 l√° c·ªßa dealer s·∫Ω ph·∫£i ƒë·ªÉ √∫p)
};

//struct th√¥ng tin v·ªÅ ng∆∞·ªùi ch∆°i trong game
//c√≥ bao g·ªìm c·∫£ dealer
struct player{
    account info; //th√¥ng tin account c·ªßa ng∆∞·ªùi ch∆°i
    vector<card> hand; //nh·ªØng l√° tr√™n tay ng∆∞·ªùi ch∆°i
    int bet; //m·ª©c bet trong v√°n c·ªßa ng∆∞·ªùi ch∆°i
    int insurance_bet; //m·ª©c bet n·∫øu ng∆∞·ªùi ch∆°i s·ª≠ d·ª•ng b·∫£o hi·ªÉm
};

//prototypes
card deal();
card hitMe();
int score(vector<card>);
bool hasAce(vector<card>);
void printCards(vector<card>);
char printSuit(card);
void doubleDown(player, player&);
int winner(player, player&);
void payout(player, player&);
void split(player&, player&);
void bet(player&);
void insurance(vector<player>&);
account load();
void save(player);
account create();
void play(vector<player>&);
void clear(vector<card>&);
void dealer_play(player&);
void displayMenu();
void displayRules();
void load_SDL_and_Imanges();
void unload_SDL_and_Imanges();
int getPlayerChoicePlayOrRule();
void let_playler_choose_to_play_or_rule();

int main(){
    initSDL(window, renderer, WINDOW_TITLE, SCREEN_WIDTH, SCREEN_HEIGHT);
    load_SDL_and_Imanges();
    
    SDL_RenderClear(renderer);
    renderTexture(menu, renderer, 0, 0, 1600, 1000);
    SDL_RenderPresent(renderer);
    
    let_playler_choose_to_play_or_rule();
    
    
    
    //t·∫°o 1 n·ªô rand s·ªë ng·∫´u nhi√™n ƒë·ªÉ ƒëo·∫°n sau s·ª≠ d·ª•ng h√†m rand()
    unsigned int time_seed = time(0);
    srand(time_seed);

    player user; //kh·ªüi t·∫°o ng∆∞·ªùi ch∆°i
    player dealer; //kh·ªüi t·∫°o dealer
    vector<player> players; //vector ch·ª©a danh s√°ch ng∆∞·ªùi ch∆°i
    char input; //s·ª≠ d·ª•ng cho input

    dealer.info.username = "Dealer"; //setup t√™n dealer
    players.push_back(dealer); //ƒë·∫©y dealer v√†o vector ch·ª©a danh s√°ch ng∆∞·ªùi ch∆°i
    int playerChoice; // l·ª±a ch·ªçn c·ªßa ng∆∞·ªùi ch∆°i

    do{
        displayMenu(); //hi·ªán th·ªã menu
        cin >> playerChoice; //cho ng∆∞·ªùi ch∆°i nh·∫≠p l·ª±a ch·ªçn

        if(playerChoice == 1){ //ng∆∞·ªùi ch∆°i ch·ªçn ƒë·ªçc lu·∫≠t ch∆°i
            displayRules(); //hi·ªÉn th·ªã lu·∫≠t ch∆°i
        }
        else if(playerChoice == 2){ //ng∆∞·ªùi ch∆°i ch·ªçn ch∆°i
                cout << "How many players(1 or 2)" << endl; //h·ªèi s·ªë l∆∞·ª£ng ng∆∞·ªùi ch∆°i
                //nh·∫≠p s·ªë ng∆∞·ªùi ch∆°i
                int numPlayers;
                cin >> numPlayers;

                for(int i = 0;i< numPlayers;i++){ //cycles through the players
                    cout << "Are you a new player(N) or existing player(E)?" << endl; //h·ªèi xem ng∆∞·ªùi ch∆°i ƒë√£ c√≥ t√†i kho·∫£n ch∆∞a
                    cin >> input; //ng∆∞·ªùi ch∆°i nh·∫≠p l·ª±a ch·ªçn xem ƒë√£ c√≥ t√†i kho·∫£n hay ch∆∞a

                    if(input == 'N' || input == 'n'){ //n·∫øu ng∆∞·ªùi ch∆°i ch∆∞a c√≥ t√†i kho·∫£n
                        user.info = create(); //g·ªçi h√†m kh·ªüi t·∫°o t√†i kho·∫£n
                        save(user); //l∆∞u th√¥ng tin ng∆∞·ªùi ch∆°i
                        players.push_back(user); //th√™m ng∆∞·ªùi ch∆°i v√†o vector l∆∞u danh s√°ch th√¥ng tin ng∆∞·ªùi ch∆°i
                    }
                    else if(input == 'E' || input == 'e'){ //n·∫øu ng∆∞·ªùi ch∆°i ƒë√£ c√≥ t√†i kho·∫£n
                        user.info = load(); //load t√†i kho·∫£n c·ªßa ng∆∞·ªùi ch∆°i
                        players.push_back(user); //ƒë·∫©y v√†o vector danh s√°ch c√°c ng∆∞·ªùi ch∆°i
                    }

                }
        }
        else{ //n·∫øu ng∆∞·ªùi ch∆°i kh√¥ng ch·ªçn theo h∆∞·ªõng d·∫´n
            cout << "Please enter 1 or 2" << endl; //y√™u c·∫ßu ng∆∞·ªùi ch∆°i ch·ªçn l·∫°i
            playerChoice = 0; //reset l·∫°i playerChoice v·ªÅ 0
            cin.ignore(); //reset b·ªô nh·ªõ ƒë·ªám
        }
    }while(playerChoice != 2); //ch·∫°y v√≤ng l·∫∑p cho ƒë·∫øn khi ng∆∞·ªùi ch∆°i ch·ªçn play

    bool continuePlay = false; //ƒë√°nh d·∫•u xem c√≥ ph·∫£i v√°n ƒë·∫ßu ti√™n ng∆∞·ªùi ch∆°i ch∆°i kh√¥ng
    int size = players.size(); //s·ªë ng∆∞·ªùi ch∆°i + 1 (dealer)
    do{
        for(int i =1;i<players.size();i++){
            if(players[i].info.money < 5){ //ki·ªÉm tra xem ng∆∞·ªùi ch∆°i c√≤n ƒë·ªß ti·ªÅn kh√¥ng
                cout << players[i].info.username << " is currently out of money. Would you like to add some, yes(Y) or (N)?" << endl; //th√¥ng b√°o cho ng∆∞·ªùi ch∆°i h·ªç kh√¥ng c√≤n ƒë·ªß ti·ªÅn ƒë·ªÉ ch∆°i
                cin >> input; //cho ng∆∞·ªùi ch∆°i l·ª±a ch·ªçn c√≥ n·∫°p th√™m ti·ªÅn kh√¥ng
                if(input == 'Y' || input == 'y'){ //n·∫øu h·ªç ch·ªçn n·∫°p th√™m ti·ªÅn
                    cout << "How much would you like to add?" << endl;
                    int addedMoney;
                    cin >> addedMoney;
                    players[i].info.money += addedMoney;
//                    cin >> players[i].info.money; //takes it in
                }
                else{ //n·∫øu ng∆∞·ªùi ch∆°i kh√¥ng n·∫°p th√™m ti·ªÅn
                    save(players[i]); //l∆∞u th√¥ng tin ng∆∞·ªùi ch∆°i
                    players.erase(players.begin() + (i)); //xo√° ng∆∞·ªùi ch∆°i ra kh·ªèi v√°n
                    i--;

                }
            }

            if(continuePlay && players.size() > 1){//if they have played at least once
                cout << players[i].info.username << " Would you like to keep playing(P) or quit(Q)" << endl;
                cin >> input; //cho ng∆∞·ªùi ch∆°i l·ª±a ch·ªçn
                if(input == 'q' || input == 'Q'){ //ng∆∞·ªùi ch∆°i mu·ªën tho√°t
                    save(players[i]); //l∆∞u th√¥ng tin ng∆∞·ªùi ch∆°i
                    players.erase(players.begin() + (i)); //xo√° ng∆∞·ªùi ch∆°i ra kh·ªèi v√°n
                    i--;
                }
            }
        }
        play(players); //ch∆°i th√¥i
        continuePlay = true; //ng∆∞·ªùi ch∆°i ƒë√£ ch∆°i xong 1 v√°n
    }while(players.size() > 1);
    //!(input == 'q' || input == 'Q')

    return 0;
}


void displayRules(){
    cout << "The rules of blackjack are fairly simple and your only opponent in the game is the dealer. Each player is dealt a two cards face up while the dealer only has one card face up. The goal is to have your two cards added total to be higher than the dealer‚Äôs two cards and under 21. If you go over 21 you ‚Äúbust‚Äù, or lose, or if the dealers two cards added together are higher than yours you also lose.     If your two card total is equal to the dealers then it is a ‚Äústand-off‚Äù or a tie. Cards values are usually face value, 2 is 2 and 10 is 10, while all face cards, jack/queen/king, are also 10. The only exception to this rule are Aces, they can take on the value of 1 or 11. To get your two cards total you simply add your two cards together. If you have any combination of an Ace or any card that is 10 points then you have what is called blackjack, 21 pts. Getting blackjack means you get paid more if you win. With all of that being said if you‚Äôre not satisfied with your two card total then you can take extra cards, called taking a hit, and for each hit you get you get one more card. The dealer does this as well but has a strict set of rules to follow on whether or not to take a hit. If a dealer‚Äôs hand is less than or equal to 16 or a ‚Äúsoft‚Äù 17, meaning they have an ace and a 6, they must take a hit. If it‚Äôs 17 or higher the dealer must stand.  So now that we know the dealer rules there are a few options for users.  As I stated earlier you can take hits to increase your card total. You may also split your cards and double down. Splitting can be done when your first two cards are of equal value and can only be split from the original hand, split hands cannot be split, the bet has to be equal or greater than the original bet for each hand. For each time you split you will receive and additional card for that hand and then you play like regular blackjack.  Users may also double down which consists of a user placing another bet of equal or lesser value when their first two cards total is equal to 9, 10, or 11 without aces. After doubling down you will only get one additional card. Some of you may have realized that if the dealer gets a blackjack or 21 you pretty much always lose, unless you yourself have blackjack. There is a way around this and it‚Äôs called insurance. If the dealer is dealt an ace face up then the dealer will ask if you want to take out insurance, equal to half of your original bet, to insure your hand if the dealer has blackjack and only when he has blackjack and helps insure you don‚Äôt lose money if he does have blackjack, insurance pays 2 to 1 so your insurance bet will cover the loss of your hand if you bet half." << endl;
}

//hi·ªÉn th·ªã menu
void displayMenu(){
    cout << "Welcome to the game of Blackjack!" << endl;
    cout << "Please select an option below." << endl;
    cout << "1) Rules" << endl;
    cout << "2) Play" << endl;
}
/**
    Rules for the dealer. They hit on everything up to 17 including a soft 17
*/
void dealer_play(player &dealer){
    if((score(dealer.hand) < 17) || (score(dealer.hand) == 17 && hasAce(dealer.hand))){ //dealer b·ªëc th√™m b√†i n·∫øu d∆∞·ªõi 17 ƒëi·ªÉm
        dealer.hand.push_back(hitMe()); //dealer gets a card
    }
}

void play(vector<player> &players){
    char input; //d√πng cho c√°c lo·∫°i input

    for(int i =1;i<players.size();i++){ //cho ng∆∞·ªùi ch∆°i l·∫ßn l∆∞·ª£t bet
        bet(players[i]); //players bet here
        cout << "Money: " << players[i].info.money << setw(10) << "Bet: " << players[i].bet << endl;
    }
    
    //chia l√° ƒë·∫ßu ti√™n cho dealer v√† √∫p l√° ƒë√≥
    players[0].hand.push_back(deal());
    players[0].hand[0].up = false;
    
    //chia l·∫ßn l∆∞·ª£t m·ªói ng∆∞·ªùi 1 l√° cho ƒë·∫øn khi ƒë·ªß 2 l√° m·ªói ng∆∞·ªùi
    for(int i = 1;i< (players.size()*2);i++){
        players[(i%players.size())].hand.push_back(deal());
//        if((i%players.size()) == 0 && (i%2) == 0){ //√∫p l√° ƒë·∫ßu ti√™n c·ªßa dealer
//            players[(i%players.size())].hand[(i%2)].up = false;
//        }
    }
    
    
//    //test insurance bet
//    for(int i = 1;i< (players.size()*2 );i++){
//        if ((i%players.size()) != 0) {
//            players[(i%players.size())].hand.push_back(deal());
//        }
//
//    }
//    card anAceCard;
//    anAceCard.suit = S;
//    anAceCard.value = 1;
//    anAceCard.up = true;
//    players[0].hand.push_back(anAceCard);
    
    //in s·ªë ƒëi·ªÉm c·ªßa m·ªói ng∆∞·ªùi ch∆°i
    for(int i=1;i<players.size();i++){
        cout << players[i].info.username << " has: " << score(players[i].hand) << setw(10) << endl;
    }

    //hi·ªán b√†i ng∆∞·ªùi ch∆°i
    for(int i =0;i<players.size();i++){
        cout << players[i].info.username << " Cards:" << endl;
        printCards(players[i].hand);
    }
    
    //ch∆°i game
    bool cont = true;
    for(int i = 1;i<players.size();i++){
        do{
            if(players[0].hand[1].value == 1 && cont){ // n·∫øu l√° ng·ª≠a c·ªßa dealer l√† 1 l√° √°t
                insurance(players);
                if(score(players[0].hand) == 21){
                    players[0].hand[0].up = true;
                    printCards(players[0].hand);
                    
                    for(int i =1;i<players.size();i++){
                        payout(players[0],players[i]);
                    }
                    input = 'S';
                }
                cont = false;
            }
            if(players[0].hand[1].value >= 10 && cont){
                if(score(players[0].hand) == 21){
                    players[0].hand[0].up = true;
                    printCards(players[0].hand);

                    for(int i =1;i<players.size();i++){
                        payout(players[0],players[i]);
                    }
                    input = 'S';
                }
                cont = false;
            }

            
            if(score(players[0].hand) <= 21){

                    if(((players[i].hand[0].value >= 10 && players[i].hand[1].value >= 10) || players[i].hand[0].value == players[i].hand[1].value) && players[i].hand.size() == 2  && score(players[i].hand) == 10){ //2 l√° gi·ªëng nhau m√† c√≥ t·ªïng ƒëi·ªÉm b·∫±ng 10 th√¨ ƒë∆∞·ª£c split ho·∫∑c double down
                        cout << players[i].info.username << " score: " << score(players[i].hand) << endl;
                        cout << "Would you like to Double Down(D), split(L),take a hit(H), or stay(S), default is to take a stay?" << endl;
                    }
                    else if(((players[i].hand[0].value >= 10 && players[i].hand[1].value >= 10) || (players[i].hand[0].value == players[i].hand[1].value)) && players[i].hand.size() == 2){ //2 l√° gi·ªëng nhau ƒë∆∞·ª£c split
                        cout << players[i].info.username << " score: " << score(players[i].hand) << endl;
                        cout << "Would you like to split(L) your cards, take a hit(H), or stay(S), default is to take a stay?" << endl;
                    }
                    else if(players[i].hand.size() == 2 && score(players[i].hand) >= 9 && score(players[i].hand) <= 11 && !(hasAce(players[i].hand))){ //t·ªïng ƒëi·ªÉm t·ª´ 9 - 11 th√¨ ƒë∆∞·ª£c double down
                        cout << players[i].info.username << " score: " << score(players[i].hand) << endl;
                        cout << "Would you like to Double Down(D), take a hit(H), or stay(S), default is to take a stay?" << endl;
                    }
                    else{//kh√¥ng c√≥ g√¨ ƒë·∫∑c bi·ªát th√¨ ch·ªâ ƒë∆∞·ª£c hit ho·∫∑c stay
                        cout << players[i].info.username << " score: " << score(players[i].hand) << endl;
                        cout << "Hit(H) or Stay(S), default is to take a stay?";
                    }
                    cin >> input; //l·∫•y l·ª±a ch·ªçn
                    switch(input){
                        //split
                        case 'L':
                        case 'l':
                        {
                            split(players[0], players[i]);
                            printCards(players[i].hand);
                            break;
                        }
                        // double down
                        case 'D':
                        case 'd':
                        {
                            doubleDown(players[0], players[i]);
                            input = 'S';
                            break;
                        }
                        // hit
                        case 'H':
                        case 'h':
                        {
                            players[i].hand.push_back(hitMe());
                            printCards(players[i].hand);
                            cout << players[i].info.username << " score is now " << score(players[i].hand) << endl;
                            break;
                        }
                            
                        default:
                            input = 's';
                    }
                    if(score(players[i].hand) > 21){
                        input = 'S';
                    }
            }
        }while(!(input == 'S' || input == 's')); //ti·∫øp t·ª•c v√≤ng l·∫∑p cho ƒë·∫øn khi ng∆∞·ªùi ch∆°i ch·ªçn stay
    }

    dealer_play(players[0]); //l∆∞·ª£t ch∆°i c·ªßa dealer

    players[0].hand[0].up = true; //l·∫≠t b√†i dealer
    
    //in b√†i v√† ƒëi·ªÉm m·ªçi ng∆∞·ªùi
    for(int i =0;i<players.size();i++){
        cout << players[i].info.username << " score: " << score(players[i].hand) << " Cards: ";
        printCards(players[i].hand);
    }


    for(int i =1;i<players.size();i++){
        if(score(players[i].hand) > 21){
            cout << "You busted! ";
        }
        int win = winner(players[0], players[i]);
        if(win == 1){
            players[i].info.wins += 1;
        }
        payout(players[0],players[i]);
        clear(players[i].hand);
        players[i].info.total_played+=1;
    }

    clear(players[0].hand);
}

//b·ªè h·∫øt b√†i tr√™n tay
void clear(vector<card> &hand){
    hand.clear();
}

//t·∫°o account cho ng∆∞·ªùi ch∆°i m·ªõi
account create(){
    account user; //kh·ªüi t·∫°o 1 account m·ªõi
    cout << "What is the username you'd like to use?" << endl;
    
    //khai b√°o th√¥ng tin file d·ªØ li·ªáu ng∆∞·ªùi ch∆°i
    fstream input; //input
    string filename; //t√™n file

    do{
        cin >> user.username; //nh·∫≠p usermame
        filename = user.username + ".dat"; //th√™m ƒëu√¥i cho t√™n file
        input.open(filename); //th·ª≠ m·ªü file c√≥ t√™n username ng∆∞·ªùi ch∆°i ƒë√£ nh·∫≠p
        //ki·ªÉm tra xem username c√≥ b·ªã tr√πng kh√¥ng
        if(!input.fail()){
            cout << "This username is already taken. Please choose another one." << endl;
        }
    }while(!input.fail()); //ch·∫°y v√≤ng l·∫∑p ƒë·∫øn khi ng∆∞·ªùi ch∆°i ch·ªçn ƒë∆∞·ª£c t√™n username kh√¥ng b·ªã tr√πng

    cout << "Please enter a password." << endl; //nh·∫≠p password
    cin.ignore();//xo√° b·ªô nh·ªõ ƒë·ªám
    getline(cin, user.password); //cho ng∆∞·ªùi ch∆°i nh·∫≠p password (s∆∞ d·ª•ng getline v√¨ password ƒë∆∞·ª£c ph√©p c√≥ d·∫•y c√°ch)
    cin.ignore(); //xo√° b·ªô nh·ªõ ƒë·ªám

    cout << "Please enter your name." << endl; //h·ªèi t√™n ng∆∞·ªùi ch∆°i
    getline(cin, user.name); //nh·∫≠p t√™n ng∆∞·ªùi ch∆°i (s·ª≠ d·ª•ng getline v√¨ t√™n c√≥ th·ªÉ c√≥ d·∫•u c√°ch)

    cout << "Please enter your email address." << endl; //h·ªèi email address
    cin >> user.email; //cho ng∆∞·ªùi ch∆°i nh·∫≠p t√™n

    cout << "Please enter how much money you'd like to deposit" << endl; //h·ªèi l∆∞·ª£ng ti·ªÅn ng∆∞·ªùi ch∆°i mu·ªën buy in
    cin >> user.money; //cho ng∆∞·ªùi ch∆°i nh·∫≠p s·ªë ti·ªÅn mu·ªën buy in

    //set t·∫•t c·∫£ c√°c th√¥ng s·ªë ng∆∞·ªùi ch∆°i v·ªÅ 0
    user.total_played = 0;
    user.wins = 0;
    user.win_percentage = 0;

    input.close(); //ƒë√≥ng file
    return user; //tr·∫£ v·ªÅ th√¥ng tin 1 ng∆∞·ªùi ch∆°i thu·ªôc struct account
}

//l∆∞u th√¥ng tin account
void save(player user){
    ofstream output; //output stream
    string filename = user.info.username + ".dat"; //so we know what file to save to

    output.open(filename, ios::out); //we want to erase all previous data

    if(!output){//if we can't open output
        cerr << "Output file will not open and data could not be saved. " << endl;
    }

    double percent = 0; //for the win percentage
    if(user.info.total_played == 0){
        percent = 0; //so we don't divide by zero
    }
    else{
        percent = ((double)user.info.wins/user.info.total_played)*100; //win percentage
    }
    output << user.info.username << endl << user.info.password << endl << user.info.name << endl << user.info.email << endl << user.info.money << endl << user.info.total_played << endl << user.info.wins << endl << setprecision (3) << percent; //writes the data to the file

    output.close(); //closes the output stream
}

//load th√¥ng tin ng∆∞·ªùi ch∆°i c≈©
account load(){
    string username, password;
    string filename;
    account user;
    ifstream input;

    //cho ng∆∞·ªùi ch∆°i ƒëƒÉng nh·∫≠p
    cout << "What is your username" << endl;
    cin >> username;
    filename = username + ".dat";
    input.open(filename);

    while (input.fail()) {
        cout << "Your username is incorrect, please re-enter it. " << endl;
        cin >> username;
        filename = username + ".dat";
        input.open(filename);
    }
    

    getline(input, user.username); //l·∫•y username t·ª´ file data
    getline(input, user.password); //l·∫•y password t·ª´ file data

    
    cout << "What is your password? " << endl;
    cin >> password;
    
    while (!(password == user.password)) {
        cout << "Wrong password! Please re-enter password. " << endl;
        cin >> password;
    }
    
 
    getline(input, user.name);
    getline(input, user.email);
    input >> user.money;
    input >> user.total_played;
    input >> user.wins;
    input >> user.win_percentage;
    
    input.close(); //ƒë√≥ng file
    return user; //tr·∫£ v·ªÅ user
}
/**
    if the dealer is displaying an Ace it asks all the players if they want to take out insurance
*/
void insurance(vector<player> &players){
    int size = players.size();
    
    for(int i=1;i<size;i++){
        int bet;
        players[i].insurance_bet = 0;
        if((players[i].info.money-(players[i].bet/2)) >=0){ //ki·ªÉm tra xem c√≤n ti·ªÅn ƒë·ªÉ c√≥ th·ªÉ insurance bet kh√¥ng
            do{
                cin.ignore();
                cout << "How much would you like to bet for insurance, up to " << (players[i].bet/2) << " " << players[i].info.username << " ?(0 if you don't want to take out insurance)" << endl;
                cin >> bet; //takes it in
            }while(!(bet <= (players[i].bet/2) && bet >=0));

            if(bet != 0){
                players[i].insurance_bet = bet;
                players[i].info.money-=bet;
            }
        }
    }

    if(score(players[0].hand) == 21){ // n·∫øu ng∆∞·ªùi ch∆°i th·∫Øng
        for(int i = 1; i<size;i++){
            if(players[i].insurance_bet != 0){
                players[i].info.money+=(players[i].insurance_bet*2);
                players[i].insurance_bet = 0;
            }
        }
    }
    else{ // n·∫øu ng∆∞·ªùi ch∆°i thua
        for(int i = 1; i<size;i++){
            if(players[i].insurance_bet != 0){
                players[i].insurance_bet = 0;
            }
        }
    }
}

/**
   Asks the user what they would like to bet and returns it
*/
void bet(player &user){
    int bet;
    do{
        cout << user.info.username << endl; //in t√™n ng∆∞·ªùi bet
        cout << "How much would you like to bet? (Must be greater than the " << MIN_BET <<  " and less than " << user.info.money << ")" << endl;
        cin >> bet; //nh·∫≠p m·ª±c bet
    }while(!(bet >= MIN_BET && bet <= user.info.money));
    user.info.money -= bet; //tr·ª´ ti·ªÅn ƒëi
    user.bet = bet; //set m·ª©c bet
}

void split(player &dealer, player &user){
    player split; //t·∫°o hand m·ªõi ƒë·ªÉ split
    vector<player> players;
    players.push_back(dealer);
    
    split.bet = user.bet;
    user.info.money -= user.bet;
    split.hand.push_back(user.hand[0]);
    split.hand.push_back(deal());
    user.hand[0] = deal(); //b·ªëc cho ng∆∞·ªùi ch∆°i l√° m·ªõi
    split.info.username = user.info.username;
    players.push_back(split);

    printCards(players[1].hand);

    char input;
    do{
        for(int i =1;i<players.size();i++){
            if(score(players[i].hand) > 21){
                input = 'S';
            }
            else{
                cout << "Hit(H) or Stay(S):";
                cin >> input;
            }
            
            if(input == 'H' || input == 'h'){
                players[i].hand.push_back(hitMe());
                printCards(players[i].hand);
                cout << players[i].info.username << " score is now " << score(players[i].hand) << endl;
            }
        }
    }while(!(input == 'S' || input == 's'));

    dealer_play(players[0]);

   
    for(int i =1;i<players.size();i++){
        cout << players[i].info.username << " score: " << score(players[i].hand) << " Cards: " << endl;
        printCards(players[i].hand);
    }

    for(int i =1;i<players.size();i++){
        if(score(players[i].hand) > 21){
            cout << "You busted!";
        }
        payout(players[0],players[i]);
    }
}

void payout(player dealer, player &user){
    if(winner(dealer, user) == 1){ //ng∆∞·ªùi ch∆°i th·∫Øng
        if(score(user.hand) == 21 && hasAce(user.hand) && user.hand.size() == 2){ //blackjack an 3/2
            user.info.money += ((user.bet*3)/2);
            user.bet = 0;
            cout << user.info.username << " won!" << endl;
        }
        else{
            user.info.money+= (user.bet*2);
            user.bet = 0;
            cout << user.info.username << " won!" << endl;
        }
    }
    else if (winner(dealer, user) == 0){ //ho√†
        user.info.money+= user.bet;
        user.bet = 0;
        cout << user.info.username << " tied!" << endl;
    }
    else{ //thua
        user.bet = 0;
        cout <<user.info.username << " lost!" << endl;
    }
}

int winner(player dealer, player &user){
    if(score(dealer.hand) == score(user.hand)){
        return 0;
    }
    else if(((score(dealer.hand) < score(user.hand)) && (score(user.hand) <= 21)) || (score(dealer.hand) > 21 && score(user.hand) <= 21)){
        return 1;
    }
    else{
        return -1;
    }
}


void doubleDown(player dealer, player &user){
    int bet; //so we can store the new bet
    do{
        cout << "How much would you like to bet? (Must be greater than the " << MIN_BET << " and less than "<< user.info.money <<")" << endl; //asks how much they want to bet
        cin >> bet; //takes it in
    }while(!(bet > MIN_BET && bet <= user.bet && bet <= user.info.money)); //we repeat this until they get it right

    user.bet+=bet; //add the new bet to the original
    user.info.money-=bet; //takes out their double down bet from the money
    user.hand.push_back(deal()); //gives the user one more card
    payout(dealer, user); //pays out the player based on if he/she won
}
/**
Returns the Character version of the suit
Fairly self-explanatory...takes in a number between 0-4 and returns the suit based off that number
*/
char printSuit(card new_card){
    switch(new_card.suit){
        case 0:
            return 'S';
        case 1:
            return 'H';
        case 2:
            return 'D';
        case 3:
            return 'C';
    }
}

/**
Prints the cards to the screen
*/
void printCards(vector<card> hand){
    const string CARD_VALUES[14] = {"A", "2", "3", "4", "5", "6", "7", "8", "9", "10", "J", "Q", "K", "X"};

    for(int i=0;i<hand.size();i++){
        /**cout << "----------" <<  endl
            << "|" << ((hand[i].up)?(hand[i].value):('X')) << ((hand[i].up)?((printSuit(hand[i]))):('X')) << setw(6) << "|" << endl
                << "|" << setw(8) << "|" << endl
                << "|" << setw(8) << "|" << endl
                << "|" << setw(8) << "|" << endl
                << "|" << setw(6) << ((hand[i].up)?(hand[i].value):('X')) <<  ((hand[i].up)?(printSuit(hand[i])):('X')) << "|" << endl
                << "----------" << endl;*/
        if(hand[i].up){ //n·∫øu b√†i ng·ª≠a
            cout << CARD_VALUES[(hand[i].value-1)] << printSuit(hand[i]) << " ";
        }
        else{ //n·∫øu b√†i √∫p th√¨ in XX
            cout << CARD_VALUES[13] << CARD_VALUES[13] << " ";
        }
    }
    cout << endl;
}


//check xem c√≥ √°t kh√¥ng
bool hasAce(vector<card> hand){
    for(int i =0;i<hand.size();i++){
        if(hand[i].value == 1){
            return true;
        }
    }

    return false;
}

// t√≠nh t·ªïng ƒëi·ªÉm tr√™n tay
int score(vector<card> hand){
    int total = 0; //t·ªïng ƒëi·ªÉm
    for(int i = 0; i<hand.size();i++){
        if(hand[i].value >= 10){ //t√≠nh ƒëi·ªÉm v·ªõi nh·ªØng l√° ƒë·∫ßu ng∆∞·ªùi ho·∫∑c l√° 10
            total+=10;
        }
        else{
            total += hand[i].value; //t√≠nh ƒëi·ªÉm v·ªõi nh·ªØng l√° b√¨nh th∆∞·ªùng
        }
    }

    if(hasAce(hand) && total <= 11){ //n·∫øu c√≥ √°t m√† b√†i ch∆∞a c·ªông v√†o ch∆∞a qu√° 21 th√¨ ƒë·ªïi √°t th√†nh 11 ƒëi·ªÉm
        total+=10;
    }

    return total;
}

//h√†m b·ªëc th√™m b√†i
card hitMe(){
    return deal();
}


//h√†m chia 1 l√° b√†i
card deal(){
    card new_card;

    new_card.value = 1 + rand() % 13; //random s·ªë
    //random ch·∫•t
    int suit = rand() % 4;
    switch(suit){
        case 0:
            new_card.suit = S;
            break;
        case 1:
            new_card.suit = H;
            break;
        case 2:
            new_card.suit = D;
            break;
        case 3:
            new_card.suit = C;
            break;
    }

    new_card.up = true;

    return new_card;
}

//void load_SDL_and_Imanges() {
//    background = loadTexture("/Users/phanviethung/Documents/Learn/UET/LTNC/Game/LTNC_game/LTNC_game/images/card_deck.png", renderer);
//}

int getPlayerChoicePlayOrRule() {
    int choice = -1;
    SDL_Event e;
    while (choice <= 0) {
        SDL_Delay(10);
        if (SDL_WaitEvent(&e) == 0) continue;
        if ((e.type == SDL_QUIT) || (e.type == SDL_KEYDOWN && e.key.keysym.sym == SDLK_ESCAPE)) {
            unload_SDL_and_Images();
            exit(1);
        }
        if ((e.type == SDL_MOUSEBUTTONDOWN)) {
            if (e.button.x >= 178 && e.button.x <= 384 && e.button.y >= 598 && e.button.y <= 694) {
                choice = 1;
                cout << "Rule" << endl;
                return choice;
                break;
            }
            if (e.button.x >= 178 && e.button.x <= 384 && e.button.y >= 478 && e.button.y <= 697) {
                choice = 2;
                cout << "Play" << endl;
                return choice;
            }
        }
    }
    return choice;
}

void load_SDL_and_Imanges() {
    menu = loadTexture("/Users/phanviethung/Documents/Learn/UET/LTNC/Game/LTNC_game/LTNC_game/images/menu.png", renderer);
    rule = loadTexture("/Users/phanviethung/Documents/Learn/UET/LTNC/Game/LTNC_game/LTNC_game/images/rule.PNG", renderer);
    background = loadTexture("/Users/phanviethung/Documents/Learn/UET/LTNC/Game/LTNC_game/LTNC_game/images/play_background.png", renderer);
    fullDeck = loadFullDeck(renderer);
    chipset = loadTexture("/Users/phanviethung/Documents/Learn/UET/LTNC/Game/LTNC_game/LTNC_game/images/chipset.png", renderer);
    
}

void unload_SDL_and_Images() {
    SDL_DestroyTexture(menu);
    SDL_DestroyTexture(background);
    SDL_DestroyTexture(rule);
    
    for (int i = 0; i < 4; i++) {
        for (int j = 0; j < 13; j++) {
            SDL_DestroyTexture(fullDeck[i][j]);
        }
    }
}

void let_playler_choose_to_play_or_rule() {
    int choice = getPlayerChoicePlayOrRule();
    while (choice != 2) {
        if (choice == 1) {
            SDL_Delay(150);
            SDL_RenderClear(renderer);
            renderTexture(rule, renderer, 0, 0, 1600, 1000);
            SDL_RenderPresent(renderer);
            SDL_Event e;
            bool c = true;
            while (c) {
                SDL_Delay(10);
                if (SDL_WaitEvent(&e) == 0) continue;
                if ((e.type == SDL_QUIT) || (e.type == SDL_KEYDOWN && e.key.keysym.sym == SDLK_ESCAPE)) {
                    unload_SDL_and_Images();
                    exit(1);
                }
                if (e.type == SDL_MOUSEBUTTONDOWN) {
                    if (e.button.x <= 134 && e.button.y <= 101) {
                        SDL_Delay(150);
                        SDL_RenderClear(renderer);
                        renderTexture(menu, renderer, 0, 0);
                        SDL_RenderPresent(renderer);
                        c = false;
                        break;
                    }
                }
            }
        }
        choice = getPlayerChoicePlayOrRule();
    }
    SDL_Delay(150);
    SDL_RenderClear(renderer);
    renderTexture(background, renderer, 0, 0);
    renderTexture(chipset, renderer, 500, 300);
    SDL_RenderPresent(renderer);
}


